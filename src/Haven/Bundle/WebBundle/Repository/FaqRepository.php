<?php

/*
 * This file is part of the Haven package.
 *
 * (c) StÃ©phan Champagne <sc@evocatio.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Haven\Bundle\WebBundle\Repository;

use Haven\Bundle\CoreBundle\Generic\StatusRepository;
use Haven\Bundle\WebBundle\Entity\Faq;

/**
 * Haven\Bundle\WebBundle\Entity\FaqRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FaqRepository extends StatusRepository {

    private $query_builder;

    public function getQueryBuilder() {
        return $this->query_builder;
    }

    public function setQueryBuilder(\Doctrine\ORM\QueryBuilder $query_builder) {
        $this->query_builder = $query_builder;
    }

    public function findAll() {
        $this->query_builder = $this->createBaseBuilder();
        return $this->getResult();
    }

    public function findAllPublished() {
        $this->query_builder = $this->filterByStatus(Faq::STATUS_PUBLISHED)->getQueryBuilder();
        return $this->getResult();
    }

    public function findAllOrderedByRank() {
        $this->order('rank');
        return $this->getResult();
    }

    public function findAllFromRank($new_rank, $old_rank, $id) {
        $this->query_builder = $this->createQueryBuilder("e");

        $this->query_builder->where('(e.rank BETWEEN :new_rank AND :old_rank OR e.rank BETWEEN :old_rank AND :new_rank) AND e.id != :id');
        $this->query_builder->setParameters(array("new_rank" => $new_rank, "old_rank" => $old_rank, "id" => $id));
        $this->query_builder->orderBy('e.rank', 'ASC');

        return $this->getResult();
    }

    private function filterByStatus($status) {
        if (is_null($this->query_builder))
            $this->query_builder = $this->createBaseBuilder();

        $this->query_builder->andWhere("e.status = :status");
        $this->query_builder->setParameter("status", $status);

        return $this;
    }

    public function createBaseBuilder() {
        $this->query_builder = $this->createQueryBuilder("e");
        return $this->query_builder->select("e, t")
                        ->leftJoin("e.translations", "t");
    }

    public function order($field, $direction = 'ASC') {
        if (is_null($this->query_builder))
            $this->query_builder = $this->createQueryBuilder("e");

        $this->query_builder->orderBy('e.' . $field, $direction);

        return $this;
    }

    public function getResult() {
        $query = $this->query_builder->getQuery();
        return $query->getResult();
    }

}