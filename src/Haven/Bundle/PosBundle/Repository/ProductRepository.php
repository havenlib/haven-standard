<?php

/*
 * This file is part of the Haven package.
 *
 * (c) StÃ©phan Champagne <sc@evocatio.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Haven\Bundle\PosBundle\Repository;

use \Haven\Bundle\CoreBundle\Generic\StatusRepository;
use Haven\Bundle\PosBundle\Entity\Product;
use Haven\Bundle\PosBundle\Entity\ProductTranslation;

/**
 * Haven\Bundle\PosBundle\Entity\ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends StatusRepository {

    private $query_builder;

    public function __construct($em, \Doctrine\ORM\Mapping\ClassMetadata $class) {
        parent::__construct($em, $class);
        $this->query_builder = $this->createQueryBuilder("e")
        ;
    }

    public function findAll() {
        return $this->getResult();
    }

    public function findAllPublished() {
        $this->filterByStatus(Product::STATUS_PUBLISHED);
        return $this->getResult();
    }

    public function findAllFromRank($new_rank, $old_rank, $id) {

        $this->query_builder->where('(e.rank BETWEEN :new_rank AND :old_rank OR e.rank BETWEEN :old_rank AND :new_rank) AND e.id != :id');
        $this->query_builder->setParameters(array("new_rank" => $new_rank, "old_rank" => $old_rank, "id" => $id));
        $this->query_builder->orderBy('e.rank', 'ASC');

        return $this->getResult();
    }

    public function findLastPublished($limit = null) {
        $this->filterByStatus(Product::STATUS_PUBLISHED);

        if (!is_null($limit))
            $this->query_builder->setMaxResults($limit);

        return $this->getResult();
    }

    public function findRandomPublished($limit = 1) {
        $max = $this->_em->createQuery('SELECT MAX(e.id) FROM HavenPosBundle:Product e WHERE e.status = :status')
                ->setParameter('status', Product::STATUS_PUBLISHED)
                ->getSingleScalarResult();

        $this->filterByStatus(Product::STATUS_PUBLISHED);
        $this->query_builder
                ->andWhere("e.id >= :id")
                ->orderBy("e.id", "ASC")
                ->setParameter('id', $rand = mt_rand(0, $max))
                ->setMaxResults($limit);

        return $this->getResult();
    }

    private function filterByStatus($status) {

        $this->query_builder->andWhere("e.status = :status");
        $this->query_builder->setParameter("status", $status);

        return $this;
    }


    public function getResult() {
        $query = $this->query_builder->getQuery();
        return $query->getResult();
    }

    /**
     * Return a query for last crated post.
     * 
     * @param boolean $return_qb
     * @param \Doctrine\ORM\QueryBuilder $query_builder
     * @return type
     */
    public function findLastCreatedOnline($qt = null) {
//        $query_builder = $this->createQueryBuilder("e");
        $this->query_builder->orderBy("e.created_at", "ASC")
                ->setMaxResults($qt);
        $this->query_builder = $this->filterOnlines();


        return $this->query_builder->getQuery()->getResult();
    }

}

?>
